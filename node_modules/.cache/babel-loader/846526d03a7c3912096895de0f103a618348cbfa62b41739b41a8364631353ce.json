{"ast":null,"code":"import{useState}from\"react\";const usePagination=_ref=>{let{contentPerPage,count}=_ref;const[page,setPage]=useState(1);const pageCount=Math.ceil(count/contentPerPage);const lastContentIndex=page*contentPerPage;const firstContentIndex=lastContentIndex-contentPerPage;const changePage=direction=>{setPage(state=>{if(direction){if(state===pageCount){return state;}return state+1;}else{if(state===1){return state;}return state-1;}});};return{totalPages:pageCount,nextPage:()=>changePage(true),prevPage:()=>changePage(false),firstContentIndex,lastContentIndex,page};};export default usePagination;","map":{"version":3,"names":["useState","usePagination","_ref","contentPerPage","count","page","setPage","pageCount","Math","ceil","lastContentIndex","firstContentIndex","changePage","direction","state","totalPages","nextPage","prevPage"],"sources":["D:/Kimi_Toshiko/Programming/EPAM-Internship-test-task/src/TSComponents/usePagination.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { useState } from \"react\";\r\n\r\ninterface IUsePaginationProps {\r\n    contentPerPage: number;\r\n    count: number;\r\n}\r\n\r\ninterface IUsePaginationReturn {\r\n    page: number;\r\n    totalPages: number;\r\n    firstContentIndex: number;\r\n    lastContentIndex: number;\r\n    nextPage: () => void;\r\n    prevPage: () => void;\r\n}\r\n\r\ntype UsePagination = ({contentPerPage, count}: IUsePaginationProps) => (IUsePaginationReturn);\r\n\r\nconst usePagination: UsePagination = ({contentPerPage, count}) => {\r\n    const [page, setPage] = useState<number>(1);\r\n    const pageCount: number = Math.ceil(count / contentPerPage);\r\n    const lastContentIndex: number = page * contentPerPage;\r\n    const firstContentIndex: number = lastContentIndex - contentPerPage;\r\n\r\n    const changePage = (direction: boolean) => {\r\n        setPage((state) => {\r\n            if (direction) {\r\n                if (state === pageCount) {\r\n                    return state;\r\n                }\r\n                return state + 1;\r\n            }\r\n            else {\r\n                if (state === 1) {\r\n                    return state;\r\n                }\r\n                return state - 1;\r\n            }\r\n        });\r\n    };\r\n\r\n    return {\r\n        totalPages: pageCount,\r\n        nextPage: () => changePage(true),\r\n        prevPage: () => changePage(false),\r\n        firstContentIndex,\r\n        lastContentIndex,\r\n        page\r\n    }\r\n};\r\n\r\nexport default usePagination;"],"mappings":"AACA,OAASA,QAAQ,KAAQ,OAAO,CAkBhC,KAAM,CAAAC,aAA4B,CAAGC,IAAA,EAA6B,IAA5B,CAACC,cAAc,CAAEC,KAAK,CAAC,CAAAF,IAAA,CACzD,KAAM,CAACG,IAAI,CAAEC,OAAO,CAAC,CAAGN,QAAQ,CAAS,CAAC,CAAC,CAC3C,KAAM,CAAAO,SAAiB,CAAGC,IAAI,CAACC,IAAI,CAACL,KAAK,CAAGD,cAAc,CAAC,CAC3D,KAAM,CAAAO,gBAAwB,CAAGL,IAAI,CAAGF,cAAc,CACtD,KAAM,CAAAQ,iBAAyB,CAAGD,gBAAgB,CAAGP,cAAc,CAEnE,KAAM,CAAAS,UAAU,CAAIC,SAAkB,EAAK,CACvCP,OAAO,CAAEQ,KAAK,EAAK,CACf,GAAID,SAAS,CAAE,CACX,GAAIC,KAAK,GAAKP,SAAS,CAAE,CACrB,MAAO,CAAAO,KAAK,CAChB,CACA,MAAO,CAAAA,KAAK,CAAG,CAAC,CACpB,CAAC,IACI,CACD,GAAIA,KAAK,GAAK,CAAC,CAAE,CACb,MAAO,CAAAA,KAAK,CAChB,CACA,MAAO,CAAAA,KAAK,CAAG,CAAC,CACpB,CACJ,CAAC,CAAC,CACN,CAAC,CAED,MAAO,CACHC,UAAU,CAAER,SAAS,CACrBS,QAAQ,CAAEA,CAAA,GAAMJ,UAAU,CAAC,IAAI,CAAC,CAChCK,QAAQ,CAAEA,CAAA,GAAML,UAAU,CAAC,KAAK,CAAC,CACjCD,iBAAiB,CACjBD,gBAAgB,CAChBL,IACJ,CAAC,CACL,CAAC,CAED,cAAe,CAAAJ,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}